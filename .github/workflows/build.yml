name: Build and Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            node-version: 20.x
            build-command: npm run build:win
            cache-key: win
          - os: macos-latest
            node-version: 20.x
            build-command: npm run build:mac
            cache-key: mac
          - os: ubuntu-latest
            node-version: 20.x
            build-command: npm run build:linux
            cache-key: linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt-get install --no-install-recommends -y libopenjp2-tools
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund --silent --ignore-scripts
    
    - name: Build app
      run: ${{ matrix.build-command }}
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        VITE_DB_URL: ${{ secrets.DB_URL }}
        VITE_DB_KEY: ${{ secrets.DB_KEY }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_URL }}
        API_KEY: ${{ secrets.API_KEY }}
        
    
    - name: Compress artifacts
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a -tzip build-artifacts.zip dist/*.exe dist/*.msi 2>/dev/null || true
        elif [ "$RUNNER_OS" == "macOS" ]; then
          zip -r build-artifacts.zip dist/*.dmg dist/*.zip 2>/dev/null || true
        else
          zip -r build-artifacts.zip dist/*.AppImage dist/*.deb dist/*.rpm 2>/dev/null || true
        fi
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.cache-key }}
        path: build-artifacts.zip
        retention-days: 1
        compression-level: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Extract and organize artifacts
      run: |
        mkdir -p release-files
        cd artifacts
        for dir in */; do
          if [ -f "$dir/build-artifacts.zip" ]; then
            unzip -q "$dir/build-artifacts.zip" -d "../release-files/"
          fi
        done
        cd ..
        ls -la release-files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        files: release-files/**
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}

    - name: Get release notes
      id: release_notes
      run: |
        RELEASE_RESPONSE=$(gh release view v${{ github.event.inputs.version }} --json body -q ".body")
        echo "NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_RESPONSE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}

    - name: Send discord message
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_URL }}
        VERSION: ${{ github.event.inputs.version }}
        NOTES: ${{ steps.release_notes.outputs.NOTES }}
      run: |
        MAX_LENGTH=1800
        SHORT_NOTES=$(echo "$NOTES" | head -c $MAX_LENGTH | sed 's/"/\\"/g')
        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
                   "username": "GitHub Actions",
                   "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                   "embeds": [{
                     "title": "New release v'"$VERSION"' published!",
                     "description": "'"$SHORT_NOTES"'",
                     "color": 5814783,
                     "url": "https://github.com/${{ github.repository }}/releases/tag/v'"$VERSION"'",
                     "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                   }]
                 }' \
             $DISCORD_WEBHOOK


        
