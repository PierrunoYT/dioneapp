{
	"build_tools": {
		"checkCommand": "msbuild -version",
		"versionRegex": "\\d+\\.\\d+\\.\\d+",
		"installCommand": {
			"windows": "curl -LO https://aka.ms/vs/17/release/vs_BuildTools.exe && vs_BuildTools.exe --quiet --wait --norestart --nocache --installPath \"C:\\\\BuildTools\" --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.NetCoreBuildTools && setx PATH \"%%PATH%%;C:\\\\BuildTools\\\\MSBuild\\\\Current\\\\Bin\""
		}
	},
	"python": {
	  "checkCommand": "python --version",
	  "versionRegex": "Python (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "curl -o python-installer.exe https://www.python.org/ftp/python/3.10.7/python-3.10.7-amd64.exe && python-installer.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0",
		"linux": "sudo apt update && sudo apt install -y python3 python3-pip",
		"macos": "brew install python"
	  }
	},
	"uv": {
	  "checkCommand": "uv --version",
	  "versionRegex": "uv (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"",
		"macos": "curl -LsSf https://astral.sh/uv/install.sh | sh",
		"linux": "curl -LsSf https://astral.sh/uv/install.sh | sh"
	  },
	  "uninstallCommand": {
		"windows": "uv cache clean && del \"%USERPROFILE%\\.local\\bin\\uv.exe\" && del \"%USERPROFILE%\\.local\\bin\\uvx.exe\"",
		"macos": "uv cache clean && rm ~/.local/bin/uv ~/.local/bin/uvx",
		"linux": "uv cache clean && rm ~/.local/bin/uv ~/.local/bin/uvx"
	  }
	},
	"node": {
	  "checkCommand": "node --version",
	  "versionRegex": "v(\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "powershell -ExecutionPolicy Bypass -Command \"iwr https://nodejs.org/dist/v20.11.1/node-v20.11.1-x64.msi -OutFile node.msi; Start-Process msiexec.exe -Wait -ArgumentList '/i node.msi /quiet'\"",
		"linux": "curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt install -y nodejs",
		"macos": "brew install node"
	  }
	},
	"npm": {
	  "checkCommand": "npm --version",
	  "versionRegex": "(\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "npm install -g npm",
		"linux": "sudo apt install -y npm",
		"macos": "brew install npm"
	  }
	},
	"pnpm": {
	  "checkCommand": "pnpm --version",
	  "versionRegex": "v(\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "npm install -g pnpm",
		"linux": "npm install -g pnpm",
		"macos": "npm install -g pnpm"
	  }
	},
	"git": {
	  "checkCommand": "git --version",
	  "versionRegex": "git version (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "winget install --id Git.Git -e --source winget",
		"linux": "sudo apt update && sudo apt install -y git",
		"macos": "brew install git"
	  }
	},
	"docker": {
	  "checkCommand": "docker --version",
	  "versionRegex": "Docker version (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "winget install -e --id Docker.DockerDesktop",
		"linux": "curl -fsSL https://get.docker.com | sudo sh",
		"macos": "brew install --cask docker"
	  }
	},
	"npx": {
	  "checkCommand": "npx --version",
	  "versionRegex": "v(\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "npm install -g npx",
		"linux": "npm install -g npx",
		"macos": "npm install -g npx"
	  }
	},
	"yarn": {
	  "checkCommand": "yarn --version",
	  "versionRegex": "v(\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "npm install -g yarn",
		"linux": "npm install -g yarn",
		"macos": "brew install yarn"
	  }
	},
	"curl": {
	  "checkCommand": "curl --version",
	  "versionRegex": "curl (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "winget install -e --id Curl.Curl",
		"linux": "sudo apt update && sudo apt install -y curl",
		"macos": "brew install curl"
	  }
	},
	"wget": {
	  "checkCommand": "wget --version",
	  "versionRegex": "GNU Wget (\\d+\\.\\d+\\.\\d+)",
	  "installCommand": {
		"windows": "winget install -e --id GNU.Wget",
		"linux": "sudo apt update && sudo apt install -y wget",
		"macos": "brew install wget"
	  }
	},
	"unzip": {
		"checkCommand": "unzip --version",
		"versionRegex": "unzip (\\d+\\.\\d+\\.\\d+)",
		"installCommand": {
			"linux": "sudo apt update && sudo apt install -y unzip"
		}
	}
  }
  